#### Toolchain commands
####

#FIXME: quick fix to get targets working in Eclipse
PWD = $(shell pwd)

GCC_INSTALL_ROOT	:= /usr/local/gcc-arm-none-eabi-4_9-2014q4
GCC_VERSION			:= 4.9.0
GCC_PREFIX			:= arm-none-eabi

CC      := $(GCC_INSTALL_ROOT)/bin/$(GCC_PREFIX)-gcc
AS      := $(GCC_INSTALL_ROOT)/bin/$(GCC_PREFIX)-gcc
AR      := $(GCC_INSTALL_ROOT)/bin/$(GCC_PREFIX)-ar
LD      := $(GCC_INSTALL_ROOT)/bin/$(GCC_PREFIX)-gcc
NM      := $(GCC_INSTALL_ROOT)/bin/$(GCC_PREFIX)-nm
OBJDUMP := $(GCC_INSTALL_ROOT)/bin/$(GCC_PREFIX)-objdump
OBJCOPY := $(GCC_INSTALL_ROOT)/bin/$(GCC_PREFIX)-objcopy
GDB     := $(GCC_INSTALL_ROOT)/bin/$(GCC_PREFIX)-gdb
SIZE	:= $(GCC_INSTALL_ROOT)/bin/$(GCC_PREFIX)-size

MK	:= mkdir -p
RM	:= rm -rf

### General Variables
OUTPUT_NAME		= main
OUTPUT_DIR		= build
BIN_DIR			= bin
OBJ_DIR			= obj
SRC_DIR			= src
LINK_DIR		= link

### Device related stuff
###
BOARD			:= BOARD_Core51822
CPU				:= cortex-m0
DEVICE 			:= NRF51
DEVICESERIES 	:= nrf51
BLE_REQD		:= BLE_STACK_SUPPORT_REQD

### CPU-dependent cleanup files
CLEAN += *.d *.elf *.hex *.bin

### Programmer
###
JLINK_DIR 		= /Applications/SEGGER/JLink/
JLINK 			= $(JLINK_DIR)JLinkExe
JLINKGDBSERVER	= $(JLINK_DIR)JLinkGDBServer

FLASH_START_ADDRESS	= 0x0
#SOFTDEVICE 			= s110_nrf51822_6.0.0_softdevice.hex

# Include directories
INCLUDEDIRS	 = $(shell find $(CONTIKI_CPU) -type d)
INCLUDEDIRS	+= $(GCC_INSTALL_ROOT)/lib/gcc/$(GCC_PREFIX)/$(GCC_VERSION)/include/
INCLUDEDIRS	+= $(GCC_INSTALL_ROOT)/lib/gcc/$(GCC_PREFIX)/$(GCC_VERSION)/include-fixed/
#$(info "Included: $(INCLUDEDIRS) " )
 
### Compiler related stuff
###
CFLAGS  = -Og	#debugging friendly
CFLAGS	+= -ggdb	#info for the debugger
CFLAGS	+= -mcpu=$(CPU)
CFLAGS	+= -mthumb
CFLAGS	+= -mabi=aapcs
CFLAGS	+= --std=gnu99
CFLAGS	+= -Wall
CFLAGS	+= -D$(DEVICE)
CFLAGS	+= -D$(BOARD)
CFLAGS  += -D$(BLE_REQD)
CFLAGS	+= $(patsubst %,-I%, $(INCLUDEDIRS))

ASFLAGS = $(patsubst %,-I%, $(INCLUDEDIRS))
ASFLAGS += -c

### Linker related stuff
###
LDDIRS 	 = $(GCC_INSTALL_ROOT)/$(GCC_PREFIX)/lib/armv6-m
LDDIRS 	+= $(GCC_INSTALL_ROOT)/lib/gcc/$(GCC_PREFIX)/$(GCC_VERSION)/armv6-m
LDDIRS	+= $(LINK_DIR)

#LD_SCRIPT = $(CONTIKI_CPU)/$(LINK_DIR)/gcc_nrf51_s110_xxaa.ld
LD_SCRIPT = $(CONTIKI_CPU)/$(LINK_DIR)/gcc_nrf51_blank_xxaa.ld


LDFLAGS = -Xlinker
LDFLAGS += -Map=$(TARGET).map
LDFLAGS += --specs=nano.specs
LDFLAGS += -u _printf_float
LDFLAGS += -mcpu=$(CPU) 
LDFLAGS += -mthumb 
LDFLAGS += -mabi=aapcs 
LDFLAGS += -T$(LD_SCRIPT)
LDFLAGS	+= -D$(DEVICE)
LDFLAGS	+= -D$(BOARD)
LDFLAGS += -D$(BLE_REQD)
LDFLAGS	+= $(patsubst %,-L%, $(LDDIRS))

### CPU-dependent directories
#CONTIKI_CPU_DIRS = $(shell find $(CONTIKI_CPU) -type d)
CONTIKI_CPU_DIRS = . nrf gcc contiki link peripherals sdk

### CPU-dependent source files
#CONTIKI_CPU_SOURCEFILES = $(shell find . -name *.c | awk -F/ '{print $$NF}')
CONTIKI_CPU_SOURCEFILES = system_nrf51.c clock.c rtimer-arch.c 
CONTIKI_CPU_SOURCEFILES += clock-nrf.c simple-uart.c nrf-delay.c nrf-radio.c nrf-timer.c
#CONTIKI_CPU_SOURCEFILES += softdevice_handler.c ble_advdata.c pstorage.c ble_conn_params.c app_scheduler.c
#ASSEMBLY_SRC = gcc_startup_$(DEVICESERIES).S
CONTIKI_CPU_SOURCEFILES += gcc-startup-$(DEVICESERIES).S
CONTIKI_SOURCEFILES += $(CONTIKI_CPU_SOURCEFILES)

#Create binary files 
UPLOAD_TARGETS = $(CONTIKI_PROJECT:=.bin)
TARGET_SIZE = $(CONTIKI_PROJECT:=.$(TARGET))
obj-bin: $(UPLOAD_TARGETS)

%.bin: %.$(TARGET)
	@echo
	@echo "Create binary(.bin) file from: " $<
	$(OBJCOPY) -O binary $< $@

## Find out the size of the compiled file 
size : 
	$(SIZE) $(TARGET_SIZE)

## Program device/Reset device
upload: rm.jlink upload.jlink 
	@echo "Starting uploading"
	$(JLINK) upload.jlink
	@echo "Done uploading"
	
rm.jlink:
	-rm -rf *.jlink
		
upload.jlink:
	echo "device nrf51822\nspeed 1000\nw4 4001e504 1\nloadbin $(PWD)/$(UPLOAD_TARGETS) $(FLASH_START_ADDRESS)\nr\ng\nqc\n" > upload.jlink
		  
upload-softdevice: rm.jlink upload-softdevice.jlink
	@echo "Convert from hex to binary. Split original hex in two to avoid huge (>250 MB) binary file with just 0s. "
	$(OBJCOPY) -Iihex -Obinary --remove-section .sec3 $(CONTIKI_CPU)/$(SOFTDEVICE) $(PWD)/_mainpart.bin
	$(OBJCOPY) -Iihex -Obinary --remove-section .sec1 --remove-section .sec2 $(CONTIKI_CPU)/$(SOFTDEVICE) $(PWD)/_uicr.bin
	$(JLINK) $(PWD)/upload-softdevice.jlink

upload-softdevice.jlink:
	@echo "Do magic. Write to NVMC to enable erase, do erase all and erase UICR, reset, enable writing, load mainpart bin, load uicr bin. Reset."
	@echo " Resetting in between is needed to disable the protections. "
	echo "w4 4001e504 1\nloadbin \"$(PWD)/_mainpart.bin\" 0\nloadbin \"$(PWD)/_uicr.bin\" 0x10001000\nr\ng\nexit\n" > $(PWD)/upload-softdevice.jlink

recover: pin-reset.jlink
	$(JLINK) pin-reset.jlink

pin-reset.jlink:
	echo "device nrf51822\nr\ng\nexit\n" > pin-reset.jlink

erase-all: erase-all.jlink
	$(JLINK) erase-all.jlink

erase-all.jlink:
	echo "device nrf51822\nw4 4001e504 2\nw4 4001e50c 1\nw4 4001e514 1\nr\nexit\n" > erase-all.jlink
		  
.PHONY: upload upload-softdevice erase-all recover size
